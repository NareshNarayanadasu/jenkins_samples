def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger'
]

pipeline {
    agent any
    environment {
        registryCredential = 'ecr:us-east-2:awscreds'   // ecr = ecr only : region of ecr : credential id in jenkins
        appRegistry = '339712784679.dkr.ecr.us-east-2.amazonaws.com/vpofileappimg'        // ecr registry url 
    
        vprofilregistry = 'https://339712784679.dkr.ecr.us-east-2.amazonaws.com'     // ecr regirty url in https and remove registry name
        ECS_CLUSTER = ' '
        ECS_SERVICE  = ''
    }
    tools {
        maven "MAVEN3"
        jdk "OracleJDK8"
    }

    stages {
        stage('Fetch Code') {
            steps {
                git branch: 'docker', url: 'https://github.com/hkhcoder/vprofile-project.git'
            }
        }

        stage('Build') {
            steps {
                sh 'mvn install -DskipTests'
            }
            post {
                success {
                    echo 'Archiving Artifacts now'
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }

        stage('Unit Tests') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Checkstyle Analysis') {
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }

        stage('Code Analysis with SonarQube') {
            environment {
                scannerHome = tool 'sonar4.7'
            }
            steps {
                withSonarQubeEnv('sonar') {
                    sh """${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=vprofile \
                        -Dsonar.projectName=vprofile-repo \
                        -Dsonar.projectVersion=1.0 \
                        -Dsonar.sources=src/ \
                        -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                        -Dsonar.junit.reportsPath=target/surefire-reports/ \
                        -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                        -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml"""
                }
            }
        }

        stage('Sonar Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Docker Build'){
            steps{
                script {
                    dockerImage = docker.build(appRegistry + ":$BUILD_NUMBER ./Docker-files/app/multistage/")
                }
            }
        }
        stage(' UPLOAD IMAGE TO ECR'){
            steps {
                script{
                    docker.withRegistry( vprofilregistry, registryCredential){
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage('latest')
                    }
                }
            }
        }
        stage( 'Deploy to ecs '){
            steps{
                withAWS(credentials: 'awscred', region: "us-east-2"){
                sh "aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment"
                }
            }
        }
    }
    
    post {
        always {
            echo 'Sending Slack notification'
            slackSend channel: '#devopscicd',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        }
    }
}
// X2aUAsYpsgmL8IYi1q99Snic/g33h06jSW/65Lgs   "ECR policy"
// plugins required for psuh docker images 
// Docker pipeline
// amazon ECR
// Amazo web services SDk 
// cloud bees docker build and publish
