    pipeline {
        agent any
        tools {
            maven "MAVEN3"
            jdk "OracleJDK8"
        }

        stages {
            stage('Fetch Code') {
                steps {
                    git branch: 'main', url: 'https://github.com/hkhcoder/vprofile-project.git'
                }
            }

            stage('Build') {
                steps {
                    sh 'mvn install -DskipTests'
                }
                post {
                    success {
                        echo 'Archiving Artifacts now'
                        archiveArtifacts artifacts: '**/*.war'
                    }
                }
            }

            stage('Unit Tests') {
                steps {
                    sh 'mvn test'
                }
            }

            stage('Checkstyle Analysis') {
                steps {
                    sh 'mvn checkstyle:checkstyle'
                }
            }

            stage('Code Analysis with SonarQube') {
                environment {
                    scannerHome = tool name: 'sonar4.7', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
                }
                steps {
                    withSonarQubeEnv('sonar') {
                        sh """${scannerHome}/bin/sonar-scanner \
                            -Dsonar.projectKey=vprofile \
                            -Dsonar.projectName=vprofile-repo \
                            -Dsonar.projectVersion=1.0 \
                            -Dsonar.sources=src/ \
                            -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                            -Dsonar.junit.reportsPath=target/surefire-reports/ \
                            -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml"""
                    }
                }
            }

            stage('Sonar Quality Gate') {
                steps {
                    timeout(time: 1, unit: 'HOURS') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }

            stage('Nexus art'){
                steps{
                    nexusArtifactUploader(
                    nexusVersion: 'nexus3',
                        protocol: 'http',
                        nexusUrl: '172.31.28.249:8081',
                        groupId: 'QA',
                        version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                        repository: 'vprofile-repo',
                        credentialsId: 'Nexuslogin',
                        artifacts: [
                        [artifactId: 'vprofile',
                            classifier: '',
                            file:' target/*.war',
                            type: 'war']
                        ]
                    )
                }
            }
        }
    }
